library(xml2)
library(xml2)
find.package("devtool")
find.package("devtools")
find.packages("devtools")
find.package("devtools")
install.packages("KernSmooth")
packageVersion("swirl")
install.packages("swirl")
package_version("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("R programming")
getwd()
dir()
x<- 0:6
class(x)
x
as.logical(x)
y <- c(1.7,"A")
class(y)
as.numeric(y)
as.complex(x)
x<-"foo"
y<-data.frame(a=1,b="a")
dump(c("x","y"), file="data.R")
rm(x,y)
source("data.R")
y
x
x <- c(4, "a", TRUE)
class(x)
z <- c(4, "a", TRUE)
class(z)
w<-4
class(w)
e<- 1:9
class(e)
x<-4
class(x)
x<-1:4;y<-2
x+y
class(x+y)
x<-c(3,5,1,10,12,6)
x[x<6]<-0
x[x<6]
x[x<6]==0
x[x %in% 1:5]
x[x <= 5] <- 0
x[x <= 5]
x[x <= 5]
x[x < 6]
x[x != 6]
x[x == 6]
x[x >= 6]
x[x < 6] <- 0
x[x < 6] == 0
> x[x != 5]
x[x != 5]
getwd()
dir()
x<- matrix(1:6,2,3)
print(x)
for(i in seq_len(x))
print(x)
for(i in seq_len(nrow(x)))
{for(j in seq_len(ncol(x)) print(x[i,j])}
for(i in seq_len(nrow(x)) {for(j in seq_len(ncol(x)) print(x[i,j])}
for(i in seq_len(nrow(x)){for(j in seq_len(ncol(x)){ print(x[i,j])}}
swirl()
library(swirl)
swirl()
library(swirl)
swirl()
library(swirl)
install_from_swirl("R Programming")
swirl()
==
x<- "true";y<-"true"
TRUE == TRUE
(true==true)==TRUE
(TRUE==TRUE)==TRUE
(FALSE==TRUE)==FALSE
(TRUE==FALSE)==FALSE
(TRUE==FALSE)==TRUE
6==7
6<7
10<=10
5!=7
5!=7
!5==7
False & FALSE
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5>8||6!=8&&4>3.9
isTRUE(6>4)
identical
identical('twins','twins')
xor(5==6,!FALSE)
ints<-sample(10)
print(ints)
class()
class(ints)
info()
display(ints)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2, 4, 5))
submit()
bori boring_function("my first function")
boring_function("my first function!")
boring_function('My first function!')
boring_function
my_mean
submit()
info()
submit()
my_mean()
my_vector<-c(1,2,3)
my_mena(my_vector(c(4,5,10)))
my_mean(my_vector(c(4,5,10)))
my_mean(my_vector(c(4,5,10)))
my_mean(my_vector(c(4,5,10)))
my_vector<-c(4, 5, 10);my_mean(my_vector)
my_mean(C(4,5,10))
my_mean([4,5,10])
my_mean(C(4,5,10))
submit()
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div+2)
remainder(4,div=2)
args(reminder)
args(remainder)
submit()
evaluate( sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){tail(1)}, c(8, 4, 0))
evaluate(function(x){x[length(dat)]}, c(8, 4, 0))
evaluate(function(x){x[-1]}, c(8, 4, 0))
evaluate(function(x){x[length(c)]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("Programming", "is", "fun!")
submit()
mad_libs(place = "TPE", adjustive = "hopefully", noun = "vending machine")
submit()
"T" %p% "love" %p% "R!"
"I" %p% "love" %p% "R!"
info()
skip()
mean(c(2, 4, 5))
submit()
boring_function('my first function!')
boring_function('My first function!')
boring_function()
boring_function
submit()
my_mean( c(4, 5, 10) )
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8) )
evaluate(function(x){x+1}, 6)
evaluate( x[x], evaluate(function(x){x+1},  c(8, 4, 0)))
evaluate( x[x], evaluate(function(x){x[1]},  c(8, 4, 0)))
evaluate(function(x){x[1]},  c(8, 4, 0)))
evaluate(function(x){x[1]},  c(8, 4, 0))
evaluate(function(x){x[length(dat)},  c(8, 4, 0))
evaluate(function(x){x[length(dat)]},  c(8, 4, 0))
evaluate(function(x){x[length(x)]},  c(8, 4, 0))
paste()
?paste
paste("Programming", "is", "fun!")
submit()
telegram("R is so much fun")
submit()
mad_libs(place="TPE", adjective="hopefilly", noun="vending machines")
submit()
'I' %p% 'love' %p% 'R!'
d1
d1<- Sys.Date()
class(d1)
unclass(d1)
di
d1
d2<- as.Date("1969-01-01")
unclass(d2)
t1<-sys.time()
t1 <- Sys.time()
Sys.time
Sys.time(t1)
args(Sys.time)
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3<- c("October 17, 1986 08:24")
t3<- "October 17, 1986 08:24"
t4 <- strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
printwd
getwd()
getwd()
pollutantmean <- function(directory,pollutant, id) {}
pollutantmean <- function(directory,pollutant, id) {mean(is.na(Fale))}
pollutantmean <- function(directory,pollutant, id= 1:332) { files_full <- listdirectory=specdata,dat <- data.frame()
for (i in id) {
dat <- rbind(dat, read.csv(files_full[i]))mean( ,na.rm=true}
b<- c(rnorm(10), 1)
b
a<- runif(10)
a
getwd
getwd()
colnames(data)
data <- read.csv("hw1_data.csv")
library(swirl)
ls()
rm(list=ls())
swirl()
head(flags)
dim(flags)
class(flags)
cls_list<- lapply(flags,class)
cls_list
class(cls_list)
character(cls_list)
as.character(cls_list)
cls_vect<- salppy(flags,class)
cls_vect<- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flags_colors <- flags[,11:17]
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- [,19:23]
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
shape_mar <- sapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags,uniqu)
unique_vals <- lapply(flags,unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(unique_vals, unique)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags, class)
vapply(flags, class,character(1))
?tapply
table
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red,summary)
tapply(flags$population, flags$landmass, summary)
5+7
X <- 5 +7
x <- 5 + 7
x
y <- x -3
y
z <- c(1.1, 9, 3.14)
?c
z
C(z,555)
C(c(1.1, 9, 3.14), 555)
c( 1.1, 9, 3.14, 555)
C(z, 555, z)
c(1.1, 9, 3.14, 555, 1.1, 9, 3.14)
Z <-(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
c(z, 555, z)
Z * 2 + 100
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z/ my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 100
z * 2 + 1000
my_div
q()
pwd
getwd
getwd()
ls()
source(cachematrix)
source(cachematrix.R)
source("cachematrix.R")
my_matrix <- makeCacheMatrix(matrix(1:4,2,2))
my_matrix <- makeCacheMatrix(matrix(1:4,2,2))
source("cachematrix.R")
my_matrix <- makeCacheMatrix(matrix(1:4,2,2))
my_matrix
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
source("cachematrix.R")
my_matrix <- makeCacheMatrix(matrix(1:4,2,2))
my_matrix$getInverse()
cacheSolve(my_matrix)
q()
